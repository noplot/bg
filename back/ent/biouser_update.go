// Code generated by entc, DO NOT EDIT.

package ent

import (
	"back/ent/biouser"
	"back/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BioUserUpdate is the builder for updating BioUser entities.
type BioUserUpdate struct {
	config
	hooks    []Hook
	mutation *BioUserMutation
}

// Where appends a list predicates to the BioUserUpdate builder.
func (buu *BioUserUpdate) Where(ps ...predicate.BioUser) *BioUserUpdate {
	buu.mutation.Where(ps...)
	return buu
}

// SetName sets the "name" field.
func (buu *BioUserUpdate) SetName(s string) *BioUserUpdate {
	buu.mutation.SetName(s)
	return buu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buu *BioUserUpdate) SetNillableName(s *string) *BioUserUpdate {
	if s != nil {
		buu.SetName(*s)
	}
	return buu
}

// Mutation returns the BioUserMutation object of the builder.
func (buu *BioUserUpdate) Mutation() *BioUserMutation {
	return buu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (buu *BioUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(buu.hooks) == 0 {
		affected, err = buu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BioUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buu.mutation = mutation
			affected, err = buu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(buu.hooks) - 1; i >= 0; i-- {
			if buu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (buu *BioUserUpdate) SaveX(ctx context.Context) int {
	affected, err := buu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (buu *BioUserUpdate) Exec(ctx context.Context) error {
	_, err := buu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buu *BioUserUpdate) ExecX(ctx context.Context) {
	if err := buu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buu *BioUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   biouser.Table,
			Columns: biouser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: biouser.FieldID,
			},
		},
	}
	if ps := buu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biouser.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, buu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{biouser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BioUserUpdateOne is the builder for updating a single BioUser entity.
type BioUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BioUserMutation
}

// SetName sets the "name" field.
func (buuo *BioUserUpdateOne) SetName(s string) *BioUserUpdateOne {
	buuo.mutation.SetName(s)
	return buuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buuo *BioUserUpdateOne) SetNillableName(s *string) *BioUserUpdateOne {
	if s != nil {
		buuo.SetName(*s)
	}
	return buuo
}

// Mutation returns the BioUserMutation object of the builder.
func (buuo *BioUserUpdateOne) Mutation() *BioUserMutation {
	return buuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buuo *BioUserUpdateOne) Select(field string, fields ...string) *BioUserUpdateOne {
	buuo.fields = append([]string{field}, fields...)
	return buuo
}

// Save executes the query and returns the updated BioUser entity.
func (buuo *BioUserUpdateOne) Save(ctx context.Context) (*BioUser, error) {
	var (
		err  error
		node *BioUser
	)
	if len(buuo.hooks) == 0 {
		node, err = buuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BioUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buuo.mutation = mutation
			node, err = buuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buuo.hooks) - 1; i >= 0; i-- {
			if buuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buuo *BioUserUpdateOne) SaveX(ctx context.Context) *BioUser {
	node, err := buuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buuo *BioUserUpdateOne) Exec(ctx context.Context) error {
	_, err := buuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buuo *BioUserUpdateOne) ExecX(ctx context.Context) {
	if err := buuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buuo *BioUserUpdateOne) sqlSave(ctx context.Context) (_node *BioUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   biouser.Table,
			Columns: biouser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: biouser.FieldID,
			},
		},
	}
	id, ok := buuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BioUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := buuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, biouser.FieldID)
		for _, f := range fields {
			if !biouser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != biouser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biouser.FieldName,
		})
	}
	_node = &BioUser{config: buuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{biouser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
